apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: {{ .Release.Name }}-skaha-tomcat
  name: {{ .Release.Name }}-skaha-tomcat
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ default 1 .Values.replicaCount }}
  selector:
    matchLabels:
      run: {{ .Release.Name }}-skaha-tomcat
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: {{ .Release.Name }}-skaha-tomcat
    spec:
{{- with .Values.deployment.skaha.nodeAffinity }}
      affinity:
        nodeAffinity:
{{ . | toYaml | indent 10 }}
{{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - env:
      {{ $userStorage := required "Missing .Values.deployment.skaha.sessions.userStorage configuration" .Values.deployment.skaha.sessions.userStorage }}
      {{- with $userStorage }}
      {{ $userStorageAdmin := required "Missing .Values.deployment.skaha.sessions.userStorage.admin configuration" .admin }}
      {{- with $userStorageAdmin }}
      {{ $userStorageAdminAuth := required "Missing .Values.deployment.skaha.sessions.userStorage.admin.auth configuration" .auth }}
      {{- with $userStorageAdminAuth }}
      {{- if .certificateSecret }}
      {{- with .certificateSecret -}}
        - name: SKAHA_USER_STORAGE_ADMIN_CERTIFICATE
          valueFrom:
            secretKeyRef:
              name: {{ .name | required "Missing .Values.deployment.skaha.sessions.userStorage.admin.auth.certificateSecret.name" }}
              key: {{ .key | default "cadcproxy.pem" }}
      {{- end }}
      {{- else if .apiKey }}
        - name: SKAHA_USER_STORAGE_ADMIN_API_KEY
          value: "{{ .apiKey | required "Missing .Values.deployment.skaha.sessions.userStorage.admin.auth.apiKey" }}"
      {{- else }}
      {{- fail "Neither .Values.deployment.skaha.sessions.userStorage.admin.auth.apiKey nor .Values.deployment.skaha.sessions.userStorage.admin.auth.certificateSecret specified." }}
      {{- end }}  # End if - certificateSecret or apiKey
      {{- end }}  # End with - userStorageAdmin.auth
      {{- end }}  # End with - userStorageAdmin
        - name: SKAHA_USER_STORAGE_SERVICE_URI
          value: "{{ required "Missing .Values.deployment.skaha.sessions.userStorage.serviceURI" .serviceURI }}"
        - name: SKAHA_USER_STORAGE_USER_HOME_URI
          value: "{{ template "skaha.job.userStorage.homeURI" $ }}"
        - name: SKAHA_USER_STORAGE_TOP_LEVEL_DIRECTORY
          value: "{{ required ".Values.deployment.skaha.sessions.userStorage.topLevelDirectory topLevelDirectory is required." .topLevelDirectory }}"
        - name: SKAHA_USER_STORAGE_HOME_BASE_DIRECTORY
          value: "{{ template "skaha.job.userStorage.homeBaseDirectory" $ }}"
        - name: SKAHA_USER_STORAGE_PROJECTS_BASE_DIRECTORY
          value: "{{ template "skaha.job.userStorage.projectsBaseDirectory" $ }}"
      {{- end }}  # End with - userStorage
        - name: SKAHA_SESSIONS_HOSTNAME
          value: "{{ .Values.deployment.skaha.sessions.hostname | default .Values.deployment.hostname }}"
        - name: SKAHA_HOSTNAME
          value: "{{ .Values.deployment.hostname }}"
        - name: GPU_ENABLED
          value: "{{ .Values.deployment.skaha.sessions.gpuEnabled | default "false" }}"
        - name: skaha.homedir
          value: "{{ .Values.deployment.skaha.skahaTld }}/home"
        - name: skaha.namespace
          value: "{{ .Values.skahaWorkload.namespace }}"
        - name: skaha.maxusersessions
          value: "{{ .Values.deployment.skaha.sessions.maxCount }}"
        - name: skaha.sessionexpiry
          value: "{{ .Values.deployment.skaha.sessions.expirySeconds }}"
        - name: skaha.defaultquotagb
          value: "{{ .Values.deployment.skaha.defaultQuotaGB }}"
        - name: skaha.harborhosts
          value: "{{ .Values.deployment.skaha.registryHosts }}"
        - name: skaha.usersgroup
          value: "{{ .Values.deployment.skaha.usersGroup }}"
        - name: skaha.headlessgroup
          value: "{{ .Values.deployment.skaha.headlessGroup }}"
        {{- with .Values.deployment.skaha.headlessPriorityGroup }}
        - name: skaha.headlessprioritygroup
          value: "{{ . }}"
        {{- end }}
        {{- with .Values.deployment.skaha.headlessPriorityClass }}
        - name: SKAHA_HEADLESS_PRIORITY_CLASS
          value: "{{ . }}"
        {{- end }}
        {{- with .Values.deployment.skaha.sessions.kueue }}
        {{- range $queueConfigKey, $queueConfig := . }}
        - name: SKAHA_QUEUE_{{ $queueConfigKey | upper }}_NAME
          value: "{{ $queueConfig.queueName | required (printf "Missing .Values.deployment.skaha.sessions.kueue.%s.queueName" $queueConfigKey) }}"
        - name: SKAHA_QUEUE_{{ $queueConfigKey | upper }}_PRIORITY_CLASS
          value: "{{ $queueConfig.priorityClass | required (printf "Missing .Values.deployment.skaha.sessions.kueue.%s.priorityClass" $queueConfigKey) }}"
        {{- end }}
        {{- end }}
        - name: skaha.adminsgroup
          value: "{{ .Values.deployment.skaha.adminsGroup }}"
        - name: skaha.posixmapper.resourceid
          value: "{{ .Values.deployment.skaha.posixMapperResourceID }}"
        - name: REDIS_HOST
          value: "{{ .Release.Name }}-redis-master.{{ .Release.Namespace }}.svc.{{ .Values.kubernetesClusterDomain }}"
        - name: REDIS_PORT
          value: "6379"
        - name: SKAHA_EXPERIMENTAL_FEATURE_GATES
          value: "{{ include "skaha.experimentalFeatureGates" $ }}"
        {{- with .Values.deployment.skaha.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ .Values.deployment.skaha.image }}
        imagePullPolicy: {{ .Values.deployment.skaha.imagePullPolicy }}
        name: {{ .Release.Name }}-skaha-tomcat
        resources:
          requests:
            memory: {{ .Values.deployment.skaha.resources.requests.memory }}
            cpu: {{ .Values.deployment.skaha.resources.requests.cpu }}
          limits:
            memory: {{ .Values.deployment.skaha.resources.limits.memory }}
            cpu: {{ .Values.deployment.skaha.resources.limits.cpu }}
        ports:
        - containerPort: 8080
          protocol: TCP
        {{- with .Values.deployment.skaha.extraPorts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.podSecurityContext }}
        securityContext:
        {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: "/config"
          name: config-volume
        - mountPath: "/add-user-config"
          name: add-user-config
        {{- with .Values.deployment.skaha.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{- with .Values.deployment.extraHosts }}
      hostAliases:
{{- range $extraHost := . }}
        - ip: {{ $extraHost.ip }}
          hostnames:
            - {{ $extraHost.hostname }}
{{- end }}
{{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: {{ .Values.deployment.skaha.priorityClassName }}
      serviceAccountName: {{ .Values.deployment.skaha.serviceAccountName }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-skaha-config
      - name: add-user-config
        configMap:
          name: {{ .Release.Name }}-add-user-config
      - name: cavern-volume
        {{- if .Values.storage.service.spec }}
        {{- toYaml (.Values.storage.service.spec | required "storage.service.spec must not be empty") | nindent 8 }}
        {{- else }}
        {{- required "storage.service.spec is required and must define the volume configuration (e.g., persistentVolumeClaim or emptyDir)" .Values.storage.service.spec | nindent 8 }}
        {{- end }}
      {{- with .Values.deployment.skaha.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
